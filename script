  // ==UserScript==
  // @name        Black List by Community v1.0
  // @namespace   Violentmonkey Scripts
  // @match       *://gamedev.ru/*
  // @grant       none
  // @version     1.0
  // @author      -
  // ==/UserScript==



  const ignoreList = ['Example1','Example2'];
  const GOLD ="#cc9d04";
  const GREEN = "#245511";
  const BLUE = "#1181c2";
  const PINK ="#801f42";
  const ORANGE ="#db6809";
  const PURPLE = "#541482";
  const WHITE = "#FFFFFF";
  const tagList = [                  
                   { nick: 'wat', tag: 'Создатель сайта', bgcolor: PURPLE, color: WHITE }
                  ];


(function()
{
    'use strict';
    ChangeNewStyle();

    const divElements = document.querySelectorAll('div.bound.head');


divElements.forEach(divElement => {
   const innerTag = divElement.innerHTML;
const tempElement = document.createElement('div');
tempElement.innerHTML = innerTag;
const anchorTag = tempElement.querySelector('li');
if (anchorTag) {
  const tempText = anchorTag.innerHTML.trim();
  const innerText = anchorTag.textContent.trim(); // Extract inner text directly from the anchorTag


    console.log("Testing div"+ignoreList.some((substring) => divElement.innerHTML.includes(substring)&&substring === innerText && substring.length === innerText.length));
    console.log("innerText"+innerText);
    console.log("innerText"+innerText.length);
    // Check if the inner text matches any of the objects in the ignoreList array
    const shouldRemove = ignoreList.some((substring) => divElement.innerHTML.includes(substring)&&substring === innerText && substring.length === innerText.length);

    // Compare the length of ignoreList with the trimmed inner text length

  if (shouldRemove) {
    const siblingsToRemove = []; // Array to collect next siblings

    let nextSibling = divElement.nextElementSibling;
    console.log(nextSibling);
   if (divElements.length > 1) {
  let nextSibling = divElement.nextElementSibling;

  while (nextSibling && !nextSibling.classList?.contains('bound')) {
    siblingsToRemove.push(nextSibling); // Add next sibling to the array
    nextSibling = nextSibling.nextElementSibling;
  }

  if (nextSibling && (nextSibling.classList?.contains('bound') || nextSibling.querySelector('div.pages') || nextSibling.querySelector('div.path'))) {
    siblingsToRemove.push(nextSibling); // Add the nextSibling to the array
  }

  // Remove all collected siblings and the original divElement
  siblingsToRemove.forEach(sibling => sibling.remove());
  divElement.remove();
}
    else{

      while (nextSibling && !nextSibling.querySelector('div.pages') && !nextSibling.querySelector('div.path') ) {
  siblingsToRemove.push(nextSibling); // Add next sibling to the array
  nextSibling = nextSibling.nextElementSibling;
}

if ((nextSibling && nextSibling.querySelector('div.pages'))|| (nextSibling && nextSibling.querySelector('div.path') )) {
  // Remove all collected siblings and the original divElement
  siblingsToRemove.forEach(sibling => sibling.remove());
  divElement.remove();
}

    }

    if ((nextSibling && nextSibling.querySelector('div.pages'))|| (nextSibling && nextSibling.querySelector('div.path') )) {
  // Remove all collected siblings and the original divElement
  siblingsToRemove.forEach(sibling => sibling.remove());
  divElement.remove();}

    }

  }
 var tagCheckResult = CheckTag(divElement, tagList);

        if (tagCheckResult.result == true)
        {
            const spanElement = document.createElement('span');
            spanElement.style.marginLeft = '0.5em';
            spanElement.style.border = '1px solid ' + tagCheckResult.user.color;
            spanElement.style.borderRadius = '0.3em';
            spanElement.style.padding = '0.1em 0.2em';
            spanElement.style.background = tagCheckResult.user.bgcolor;
            spanElement.style.fontSize = '0.8em';
            spanElement.style.color = tagCheckResult.user.color;
            spanElement.style.opacity = '0.7';
            spanElement.innerHTML = tagCheckResult.user.tag;

            const ulElement = divElement.querySelector('ul');
            const liElement = ulElement.querySelector('li');
            const aElement = liElement.querySelector('a');
            liElement.insertBefore(spanElement, aElement.nextSibling);
        }
    });




     const divElements1 = document.querySelectorAll('div:not([class])');

divElements1.forEach(divElement => {
  const spanElements = divElement.querySelectorAll('span.q.small');

  spanElements.forEach(spanElement => {
    let value = spanElement.textContent.trim();

    ignoreList.forEach(substring => {
      const searchString = substring + ' [';
      if (value.includes(searchString)) {
        value = value.replace(searchString, '??? [');
      }
    });

    spanElement.textContent = value;

    if (ignoreList.some(substring => value.startsWith(substring))) {
      divElement.remove();
    }
  });
});
      const bElements = document.querySelectorAll('b');

      bElements.forEach(bElement =>
      {
          ignoreList.forEach(substring =>
          {
              if (bElement.textContent.includes(substring))
              {
                  const replacedContent = bElement.innerHTML.replace(new RegExp(substring, 'g'), '');
                  bElement.innerHTML = replacedContent;
              }
          });
      });
  })();



  function ChangeNewStyle()
  {
    var style = document.createElement("style");
    style.textContent = ".row.u span.red.small {width: 0.7em;display: inline-flex;height: 0.7em;content-visibility: hidden;background-color: red;border-radius: 50%;vertical-align: middle;font-size: 1em; }";
    document.head.appendChild(style);
  }

  function CheckTag(divElement, objectArray)
  {
      const ulElement = divElement.querySelector('ul');
      const liElement = ulElement.querySelector('li');
      const aElement = liElement.querySelector('a');
      const result = {result: false, user: undefined};

      for (let i = 0; i < objectArray.length; i++)
      {
          const user = objectArray[i];

          if (aElement.innerHTML.includes(user.nick))
          {
              result.result = true;
              result.user = user;
              return result;
          }
      }

      return result;
  }
