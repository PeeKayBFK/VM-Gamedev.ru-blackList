  // ==UserScript==
  // @name        Black List by Community v1.0
  // @namespace   Violentmonkey Scripts
  // @match       *://gamedev.ru/*
  // @grant       none
  // @version     1.0
  // @author      -
  // ==/UserScript==



  const ignoreList = ['Example1','Example2'];
  const GOLD ="#cc9d04";
  const GREEN = "#245511";
  const BLUE = "#1181c2";
  const PINK ="#801f42";
  const ORANGE ="#db6809";
  const PURPLE = "#541482";
  const WHITE = "#FFFFFF";
  const tagList = [                  
                   { nick: 'wat', tag: 'Создатель сайта', bgcolor: PURPLE, color: WHITE }
                  ];


(function() {
  'use strict';

  ChangeNewStyle();

  const divElements = document.querySelectorAll('div.bound.head');

  divElements.forEach(divElement => {
    const anchorTag = divElement.querySelector('li');

    if (anchorTag) {
      const innerText = anchorTag.textContent.trim();
      const shouldRemove = ignoreList.some(substring => substring === innerText);

      if (shouldRemove) {
        const siblingsToRemove = [];
        let nextSibling = divElement.nextElementSibling;

        if (divElements.length > 1) {
          while (nextSibling && !nextSibling.classList?.contains('bound') && !nextSibling.classList?.contains('head')) {
            siblingsToRemove.push(nextSibling);
            nextSibling = nextSibling.nextElementSibling;
          }

          if (nextSibling && (nextSibling.classList?.contains('bound') || nextSibling.classList?.contains('head') || nextSibling.querySelector('div.pages') || nextSibling.querySelector('div.path'))) {
            siblingsToRemove.push(nextSibling);
          }

          siblingsToRemove.forEach(sibling => sibling.remove());
          divElement.remove();
        } else {
          while (nextSibling) {
            if ((nextSibling instanceof Element && nextSibling.classList.contains('path'))
              || (nextSibling instanceof Element && nextSibling.tagName === 'DIV' && nextSibling.classList.contains('head'))
              || (nextSibling instanceof Element && nextSibling.tagName === 'DIV' && nextSibling.classList.contains('pages')) || (nextSibling instanceof Element && nextSibling.tagName === 'DIV' && nextSibling.classList.contains('path'))) {
              siblingsToRemove.forEach(sibling => sibling.remove());
              divElement.remove();
            }

            siblingsToRemove.push(nextSibling);
            nextSibling = nextSibling.nextSibling;
          }

          console.log(siblingsToRemove.length)
          console.log(nextSibling)
          if ((nextSibling instanceof Element && nextSibling.tagName === 'DIV' && nextSibling.classList.contains('pages')) || (nextSibling instanceof Element && nextSibling.tagName === 'DIV' && nextSibling.classList.contains('path'))) {
            siblingsToRemove.forEach(sibling => sibling.remove());
            divElement.remove();
          }
        }
      }

      var tagCheckResult = CheckTag(divElement, tagList);

      if (tagCheckResult.result == true) {
        const spanElement = document.createElement('span');
        spanElement.style.marginLeft = '0.5em';
        spanElement.style.border = '1px solid ' + tagCheckResult.user.color;
        spanElement.style.borderRadius = '0.3em';
        spanElement.style.padding = '0.1em 0.2em';
        spanElement.style.background = tagCheckResult.user.bgcolor;
        spanElement.style.fontSize = '0.8em';
        spanElement.style.color = tagCheckResult.user.color;
        spanElement.style.opacity = '0.7';
        spanElement.innerHTML = tagCheckResult.user.tag;

        const ulElement = divElement.querySelector('ul');
        const liElement = ulElement.querySelector('li');
        const aElement = liElement.querySelector('a');
        liElement.insertBefore(spanElement, aElement.nextSibling);
      }
    }
  });

  const bElements = document.querySelectorAll('b');

  bElements.forEach(bElement => {
    ignoreList.forEach(substring => {
      if (bElement.textContent.includes(substring)) {
        const replacedContent = bElement.innerHTML.replace(new RegExp(substring, 'g'), '');
        bElement.innerHTML = replacedContent;
      }
    });
  });

  const divElements1 = document.querySelectorAll('div:not([class])');

  divElements1.forEach(divElement => {
    const spanElements = divElement.querySelectorAll('span.q.small');

    spanElements.forEach(spanElement => {
      let value = spanElement.textContent.trim();

      if (ignoreList.some(substring => value.startsWith(substring))) {
        divElement.remove();
      }

      ignoreList.forEach(substring => {
        const searchString = substring + ' [';
        if (value.includes(searchString)) {
          value = value.replace(searchString, '??? [');
        }
      });

      spanElement.textContent = value;
    });
  });

  function ChangeNewStyle() {
    var style = document.createElement("style");
    style.textContent = ".row.u span.red.small {width: 0.7em;display: inline-flex;height: 0.7em;content-visibility: hidden;background-color: red;border-radius: 50%;vertical-align: middle;font-size: 1em; }";
    document.head.appendChild(style);
  }

  function CheckTag(divElement, objectArray) {
    const ulElement = divElement.querySelector('ul');
    const liElement = ulElement.querySelector('li');
    const aElement = liElement.querySelector('a');
    const result = { result: false, user: undefined };

    for (let i = 0; i < objectArray.length; i++) {
      const user = objectArray[i];

      if (aElement.innerHTML.includes(user.nick)) {
        result.result = true;
        result.user = user;
        return result;
      }
    }

    return result;
  }
})();
